{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rkoef\\\\Documents\\\\Projects\\\\Nykredit\\\\Nykredit\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:5000/api/stocks').then(res => res.json()).then(jsonData => {\n      // Get all institution keys (Inst1, Inst2, etc.)\n      const institutions = Object.keys(jsonData);\n\n      // Use the first institution's dates as reference\n      const chartData = jsonData[institutions[0]].map((item, index) => {\n        // Start with the date\n        const dataPoint = {\n          date: item.date\n        };\n\n        // Add price data for each institution\n        institutions.forEach(inst => {\n          var _jsonData$inst$index;\n          dataPoint[inst] = (_jsonData$inst$index = jsonData[inst][index]) === null || _jsonData$inst$index === void 0 ? void 0 : _jsonData$inst$index.price;\n        });\n        return dataPoint;\n      });\n      setData(chartData);\n    }).catch(error => console.error('Error:', error));\n  }, []);\n\n  // Define colors for different lines\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Stock Price Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '400px'\n      },\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: data,\n          margin: {\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5\n          },\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\",\n            angle: -45,\n            textAnchor: \"end\",\n            height: 60\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), Object.keys(data[0] || {}).filter(key => key !== 'date').map((inst, index) => /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: inst,\n            stroke: colors[index % colors.length],\n            name: `${inst} Price`,\n            dot: false\n          }, inst, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","App","_s","data","setData","fetch","then","res","json","jsonData","institutions","Object","keys","chartData","map","item","index","dataPoint","date","forEach","inst","_jsonData$inst$index","price","catch","error","console","colors","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","angle","textAnchor","filter","key","type","stroke","length","name","dot","_c","$RefreshReg$"],"sources":["C:/Users/rkoef/Documents/Projects/Nykredit/Nykredit/frontend/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  \n  useEffect(() => {\n    fetch('http://localhost:5000/api/stocks')\n      .then(res => res.json())\n      .then(jsonData => {\n        // Get all institution keys (Inst1, Inst2, etc.)\n        const institutions = Object.keys(jsonData);\n        \n        // Use the first institution's dates as reference\n        const chartData = jsonData[institutions[0]].map((item, index) => {\n          // Start with the date\n          const dataPoint = { date: item.date };\n          \n          // Add price data for each institution\n          institutions.forEach(inst => {\n            dataPoint[inst] = jsonData[inst][index]?.price;\n          });\n          \n          return dataPoint;\n        });\n\n        setData(chartData);\n      })\n      .catch(error => console.error('Error:', error));\n  }, []);\n\n  // Define colors for different lines\n  const colors = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042'];\n\n  return (\n    <div className=\"App\">\n      <h1>Stock Price Chart</h1>\n      <div style={{ width: '100%', height: '400px' }}>\n        <ResponsiveContainer>\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis \n              dataKey=\"date\"\n              angle={-45}\n              textAnchor=\"end\"\n              height={60}\n            />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            {Object.keys(data[0] || {}).filter(key => key !== 'date').map((inst, index) => (\n              <Line\n                key={inst}\n                type=\"monotone\"\n                dataKey={inst}\n                stroke={colors[index % colors.length]}\n                name={`${inst} Price`}\n                dot={false}\n              />\n            ))}\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}